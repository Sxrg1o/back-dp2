"""
Microservicio de Men√∫ y Carta para el restaurante Dom√≥tica.
Gestiona todos los elementos relacionados con los productos alimenticios.
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import uvicorn
import os

from infrastructure.db import create_tables
from infrastructure.handlers import item_router, ingrediente_router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gesti√≥n del ciclo de vida de la aplicaci√≥n.
    """
    # Startup
    print("üöÄ Iniciando microservicio de Men√∫ y Carta...")
    create_tables()
    print("‚úÖ Base de datos inicializada")
    yield
    # Shutdown
    print("üõë Cerrando microservicio de Men√∫ y Carta...")


# Crear la aplicaci√≥n FastAPI
app = FastAPI(
    title="Men√∫ y Carta API",
    description="""
    ## Microservicio de Men√∫ y Carta para el restaurante Dom√≥tica
    
    Este microservicio gestiona todos los elementos relacionados con los productos alimenticios del restaurante, incluyendo:
    
    - **Platos**: Entradas, platos principales y postres
    - **Bebidas**: Alcoh√≥licas y no alcoh√≥licas
    - **Ingredientes**: Gesti√≥n de inventario de ingredientes
    - **Informaci√≥n nutricional**: Valores nutricionales y etiquetas especiales
    
    ### Caracter√≠sticas principales:
    - ‚úÖ Gesti√≥n completa de men√∫ y carta
    - ‚úÖ Control de stock e inventario
    - ‚úÖ Informaci√≥n nutricional detallada
    - ‚úÖ Sistema de etiquetas para filtrado
    - ‚úÖ B√∫squeda y filtros avanzados
    - ‚úÖ Arquitectura hexagonal (Clean Architecture)
    - ‚úÖ Documentaci√≥n autom√°tica con Swagger
    
    ### Endpoints principales:
    - `/items/` - Gesti√≥n de √≠tems del men√∫
    - `/ingredientes/` - Gesti√≥n de ingredientes
    - `/health` - Estado del servicio
    """,
    version="1.0.0",
    contact={
        "name": "Equipo de Desarrollo Dom√≥tica",
        "email": "dev@domotica.com",
    },
    license_info={
        "name": "MIT",
        "url": "https://opensource.org/licenses/MIT",
    },
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En producci√≥n, especificar dominios espec√≠ficos
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir routers
app.include_router(item_router)
app.include_router(ingrediente_router)


@app.get("/health", tags=["health"])
def health_check():
    """
    Verifica el estado del microservicio.
    
    Returns:
        dict: Estado del servicio
    """
    return {
        "status": "healthy",
        "service": "menu-ms",
        "version": "1.0.0",
        "message": "Microservicio de Men√∫ y Carta funcionando correctamente"
    }


@app.get("/", tags=["root"])
def root():
    """
    Endpoint ra√≠z del microservicio.
    
    Returns:
        dict: Informaci√≥n b√°sica del servicio
    """
    return {
        "message": "üçΩÔ∏è API de Men√∫ y Carta funcionando üöÄ",
        "service": "menu-ms",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/info", tags=["info"])
def service_info():
    """
    Informaci√≥n detallada del microservicio.
    
    Returns:
        dict: Informaci√≥n completa del servicio
    """
    return {
        "service": "menu-ms",
        "version": "1.0.0",
        "description": "Microservicio de Men√∫ y Carta para el restaurante Dom√≥tica",
        "features": [
            "Gesti√≥n de platos (entradas, principales, postres)",
            "Gesti√≥n de bebidas (alcoh√≥licas y no alcoh√≥licas)",
            "Control de ingredientes e inventario",
            "Informaci√≥n nutricional completa",
            "Sistema de etiquetas y filtros",
            "B√∫squeda avanzada",
            "Arquitectura hexagonal"
        ],
        "endpoints": {
            "items": "/items/",
            "ingredientes": "/ingredientes/",
            "health": "/health",
            "docs": "/docs"
        },
        "database": "SQLite (desarrollo) / PostgreSQL (producci√≥n)"
    }


@app.post("/seed-data", tags=["admin"])
def seed_peruvian_data():
    """
    Pobla la base de datos con datos de prueba t√≠picos de Per√∫.
    Incluye platos, bebidas e ingredientes tradicionales peruanos.
    """
    try:
        from seed_data_peru import seed_database
        seed_database()
        return {
            "message": "Base de datos poblada exitosamente con datos peruanos",
            "success": True,
            "data": {
                "ingredientes": "Ingredientes t√≠picos peruanos (aj√≠ amarillo, rocoto, l√∫cuma, etc.)",
                "platos": "Platos tradicionales (ceviche, lomo saltado, causa lime√±a, etc.)",
                "bebidas": "Bebidas peruanas (chicha morada, pisco sour, Inca Kola, etc.)"
            }
        }
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"Error al poblar la base de datos: {str(e)}"
        )


if __name__ == "__main__":
    port = int(os.getenv("PORT", 8002))  # Puerto por defecto 8002
    host = os.getenv("HOST", "0.0.0.0")
    reload = os.getenv("RELOAD", "true").lower() == "true"
    
    print(f"üöÄ Iniciando servidor en {host}:{port}")
    print(f"üìö Documentaci√≥n disponible en: http://{host}:{port}/docs")
    print(f"üîç Health check en: http://{host}:{port}/health")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=reload,
        log_level="info"
    )