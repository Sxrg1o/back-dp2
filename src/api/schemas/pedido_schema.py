"""
Pydantic schemas for Pedido (Order) entities.
"""

from typing import Optional, ClassVar, List
from datetime import datetime
from decimal import Decimal
from pydantic import BaseModel, Field, ConfigDict, field_validator
from src.core.enums.pedido_enums import EstadoPedido


class PedidoBase(BaseModel):
    """Base schema for Pedido."""

    id_mesa: str = Field(description="Mesa ID (ULID)", min_length=1, max_length=36)
    notas_cliente: Optional[str] = Field(
        default=None, description="Cliente notes"
    )
    notas_cocina: Optional[str] = Field(
        default=None, description="Kitchen notes"
    )


class PedidoCreate(PedidoBase):
    """Schema for creating a new pedido.

    Note: numero_pedido is auto-generated by the service, so it's not included here.
    Note: monetary fields are optional on creation, defaults to 0.00.
    """

    subtotal: Optional[Decimal] = Field(
        default=Decimal("0.00"),
        description="Subtotal amount",
        ge=0,
        decimal_places=2
    )
    impuestos: Optional[Decimal] = Field(
        default=Decimal("0.00"),
        description="Tax amount",
        ge=0,
        decimal_places=2
    )
    descuentos: Optional[Decimal] = Field(
        default=Decimal("0.00"),
        description="Discount amount",
        ge=0,
        decimal_places=2
    )
    total: Optional[Decimal] = Field(
        default=Decimal("0.00"),
        description="Total amount",
        ge=0,
        decimal_places=2
    )

    @field_validator('subtotal', 'impuestos', 'descuentos', 'total', mode='before')
    @classmethod
    def validate_decimals(cls, v):
        """Validate and convert decimal values."""
        if v is None:
            return Decimal("0.00")
        if isinstance(v, (int, float)):
            return Decimal(str(v))
        return v


class PedidoUpdate(BaseModel):
    """Schema for updating pedido.

    All fields are optional to allow partial updates.
    Note: estado should be updated via the dedicated cambiar_estado endpoint.
    """

    id_mesa: Optional[str] = Field(
        default=None, description="Mesa ID (ULID)", min_length=1, max_length=36
    )
    subtotal: Optional[Decimal] = Field(
        default=None,
        description="Subtotal amount",
        ge=0,
        decimal_places=2
    )
    impuestos: Optional[Decimal] = Field(
        default=None,
        description="Tax amount",
        ge=0,
        decimal_places=2
    )
    descuentos: Optional[Decimal] = Field(
        default=None,
        description="Discount amount",
        ge=0,
        decimal_places=2
    )
    total: Optional[Decimal] = Field(
        default=None,
        description="Total amount",
        ge=0,
        decimal_places=2
    )
    notas_cliente: Optional[str] = Field(
        default=None, description="Cliente notes"
    )
    notas_cocina: Optional[str] = Field(
        default=None, description="Kitchen notes"
    )

    @field_validator('subtotal', 'impuestos', 'descuentos', 'total', mode='before')
    @classmethod
    def validate_decimals(cls, v):
        """Validate and convert decimal values."""
        if v is None:
            return None
        if isinstance(v, (int, float)):
            return Decimal(str(v))
        return v


class PedidoEstadoUpdate(BaseModel):
    """Schema for updating pedido estado."""

    estado: EstadoPedido = Field(description="New order status")


class PedidoResponse(PedidoBase):
    """Schema for pedido responses."""

    model_config: ClassVar[ConfigDict] = ConfigDict(from_attributes=True)

    id: str = Field(description="Pedido ID (ULID)")
    numero_pedido: str = Field(description="Unique order number")
    estado: EstadoPedido = Field(description="Order status")
    subtotal: Decimal = Field(description="Subtotal amount")
    impuestos: Decimal = Field(description="Tax amount")
    descuentos: Decimal = Field(description="Discount amount")
    total: Decimal = Field(description="Total amount")

    # Estado timestamps
    fecha_confirmado: Optional[datetime] = Field(
        default=None, description="Confirmed timestamp"
    )
    fecha_en_preparacion: Optional[datetime] = Field(
        default=None, description="In preparation timestamp"
    )
    fecha_listo: Optional[datetime] = Field(
        default=None, description="Ready timestamp"
    )
    fecha_entregado: Optional[datetime] = Field(
        default=None, description="Delivered timestamp"
    )
    fecha_cancelado: Optional[datetime] = Field(
        default=None, description="Cancelled timestamp"
    )

    # Audit fields
    fecha_creacion: Optional[datetime] = Field(
        default=None, description="Creation timestamp"
    )
    fecha_modificacion: Optional[datetime] = Field(
        default=None, description="Last modification timestamp"
    )
    creado_por: Optional[str] = Field(
        default=None, description="Created by user ID"
    )
    modificado_por: Optional[str] = Field(
        default=None, description="Modified by user ID"
    )


class PedidoSummary(BaseModel):
    """Schema for summarized pedido information in lists."""

    model_config: ClassVar[ConfigDict] = ConfigDict(from_attributes=True)

    id: str = Field(description="Pedido ID (ULID)")
    numero_pedido: str = Field(description="Unique order number")
    id_mesa: str = Field(description="Mesa ID (ULID)")
    estado: EstadoPedido = Field(description="Order status")
    total: Decimal = Field(description="Total amount")
    fecha_creacion: Optional[datetime] = Field(
        default=None, description="Creation timestamp"
    )


class PedidoList(BaseModel):
    """Schema for paginated list of pedidos."""

    items: List[PedidoSummary]
    total: int = Field(description="Total number of pedidos")


class PedidoOpcionItemCreate(BaseModel):
    """Schema for an option within an order item."""

    id_producto_opcion: str = Field(description="Producto Opcion ID (ULID)", min_length=1, max_length=36)
    precio_adicional: Decimal = Field(
        description="Additional price at order time",
        ge=0,
        decimal_places=2
    )

    @field_validator('precio_adicional', mode='before')
    @classmethod
    def validate_decimals(cls, v):
        """Validate and convert decimal values."""
        if v is None:
            return Decimal("0.00")
        if isinstance(v, (int, float)):
            return Decimal(str(v))
        return v


class PedidoItemCreate(BaseModel):
    """Schema for an item within a complete order creation."""

    id_producto: str = Field(description="Producto ID (ULID)", min_length=1, max_length=36)
    cantidad: int = Field(default=1, description="Quantity", ge=1)
    precio_unitario: Decimal = Field(description="Unit price", gt=0, decimal_places=2)
    opciones: List[PedidoOpcionItemCreate] = Field(
        default=[],
        description="List of selected options for this product"
    )
    notas_personalizacion: Optional[str] = Field(
        default=None, description="Customization notes for this item"
    )

    @field_validator('precio_unitario', mode='before')
    @classmethod
    def validate_decimals(cls, v):
        """Validate and convert decimal values."""
        if v is None:
            return Decimal("0.00")
        if isinstance(v, (int, float)):
            return Decimal(str(v))
        return v


class PedidoCompletoCreate(BaseModel):
    """Schema for creating a complete order with items in one transaction."""

    id_mesa: str = Field(description="Mesa ID (ULID)", min_length=1, max_length=36)
    items: List[PedidoItemCreate] = Field(description="List of order items", min_length=1)
    notas_cliente: Optional[str] = Field(
        default=None, description="Cliente notes"
    )
    notas_cocina: Optional[str] = Field(
        default=None, description="Kitchen notes"
    )


class PedidoProductoWithOpcionesResponse(BaseModel):
    """Schema for pedido producto with its options."""

    model_config: ClassVar[ConfigDict] = ConfigDict(from_attributes=True)

    id: str = Field(description="PedidoProducto ID (ULID)")
    id_pedido: str = Field(description="Pedido ID (ULID)")
    id_producto: str = Field(description="Producto ID (ULID)")
    cantidad: int = Field(description="Quantity")
    precio_unitario: Decimal = Field(description="Unit price")
    precio_opciones: Decimal = Field(description="Options price")
    subtotal: Decimal = Field(description="Subtotal amount")
    notas_personalizacion: Optional[str] = Field(default=None, description="Customization notes")
    opciones: List["PedidoOpcionResponse"] = Field(default=[], description="Selected options")
    fecha_creacion: Optional[datetime] = Field(default=None, description="Creation timestamp")
    fecha_modificacion: Optional[datetime] = Field(default=None, description="Last modification timestamp")


class PedidoCompletoResponse(PedidoResponse):
    """Schema for complete order response with items and their options."""

    items: List[PedidoProductoWithOpcionesResponse] = Field(description="Order items with options")

# Import for type hint in PedidoCompletoResponse
from src.api.schemas.pedido_producto_schema import PedidoProductoResponse
from src.api.schemas.pedido_opcion_schema import PedidoOpcionResponse
