"""
Punto de entrada principal de la aplicaci√≥n FastAPI.
"""

import importlib
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, APIRouter
from fastapi.middleware.cors import CORSMiddleware

from src.core.database import create_tables, close_database
from src.core.config import get_settings
from src.core.logging import configure_logging
from src.core.dependencies import ErrorHandlerMiddleware


# Configurar logger para este m√≥dulo
logger = logging.getLogger(__name__)


async def auto_seed_database():
    """
    Ejecuta el seed de la base de datos autom√°ticamente si est√° vac√≠a.
    
    Verifica si existen categor√≠as en la base de datos. Si no hay ninguna,
    ejecuta el script de seed para poblar la BD con datos iniciales.
    """
    try:
        import os
        from sqlalchemy import select, func
        from src.core.database import DatabaseManager
        from src.models.menu.categoria_model import CategoriaModel
        
        logger.info("üîç Verificando estado de la base de datos...")
        
        # Obtener sesi√≥n de base de datos
        db_manager = DatabaseManager()
        async with db_manager.session() as session:
            # Contar categor√≠as existentes
            query = select(func.count(CategoriaModel.id))
            result = await session.execute(query)
            count = result.scalar()
            
            logger.info(f"Categor√≠as encontradas: {count}")
            logger.info(f"DATABASE_URL: {os.getenv('DATABASE_URL', 'No configurada')}")
            
            if count == 0:
                logger.info("üå± Base de datos vac√≠a detectada. Ejecutando seed autom√°tico...")
                
                # Importar y ejecutar el seeder
                from scripts.seed_cevicheria_data import CevicheriaSeeder
                
                # Crear instancia del seeder CON la sesi√≥n
                seeder = CevicheriaSeeder(session)
                await seeder.seed_all()
                
                # Commit de los cambios
                await session.commit()
                
                logger.info("‚úÖ Seed completado exitosamente!")
            else:
                logger.info(f"‚úÖ Base de datos ya contiene datos ({count} categor√≠as). Skip seed.")
            
    except Exception as e:
        import traceback
        logger.error(f"‚ùå Error al ejecutar auto-seed: {e}")
        logger.error(f"Stack trace completo:\n{traceback.format_exc()}")
        logger.warning("‚ö†Ô∏è La aplicaci√≥n continuar√° sin datos de seed")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestiona el ciclo de vida de la aplicaci√≥n FastAPI.

    Controla los eventos de inicio y apagado de la aplicaci√≥n,
    configurando recursos necesarios al inicio y liber√°ndolos al finalizar.

    Parameters
    ----------
    app : FastAPI
        La instancia de la aplicaci√≥n FastAPI

    Notes
    -----
    Este gestor se ejecuta en estas fases:
    1. C√≥digo de inicializaci√≥n (antes de yield)
    2. Aplicaci√≥n en funcionamiento (durante yield)
    3. C√≥digo de limpieza (despu√©s de yield)
    """
    # Fase de inicializaci√≥n
    logger.info("Iniciando Restaurant Backend API...")

    # Configurar sistema de logging
    configure_logging()

    # Crear tablas en la base de datos si no existen
    await create_tables()
    
    # Peque√±a espera para asegurar que las tablas est√©n completamente creadas
    import asyncio
    await asyncio.sleep(0.5)

    # Ejecutar seed autom√°ticamente si la BD est√° vac√≠a
    # await auto_seed_database()

    logger.info("Restaurant Backend API iniciada correctamente")

    yield  # La aplicaci√≥n est√° en funcionamiento

    # Fase de limpieza
    logger.info("Cerrando Restaurant Backend API...")

    # Cerrar conexiones de base de datos
    await close_database()

    logger.info("Recursos liberados correctamente")


def register_routers(app: FastAPI) -> None:
    """
    Registra todos los routers de la aplicaci√≥n.

    Carga din√°micamente los controladores disponibles y los registra
    con la aplicaci√≥n FastAPI.

    Parameters
    ----------
    app : FastAPI
        La instancia de la aplicaci√≥n FastAPI donde registrar los routers
    """
    # Estructura de controladores a cargar: (m√≥dulo, tag)
    controllers = [
        ("src.api.controllers.rol_controller", "Roles"),
        ("src.api.controllers.categoria_controller", "Categor√≠as"),
        ("src.api.controllers.alergeno_controller", "Al√©rgenos"),
        ("src.api.controllers.producto_controller", "Productos"),
        ("src.api.controllers.tipo_opciones_controller", "Tipos de Opciones"),
        ("src.api.controllers.producto_opcion_controller", "Producto Opciones"),
        ("src.api.controllers.sync_controller", "Sincronizaci√≥n"),
        # ("src.api.controllers.usuarios_controller", "Usuarios"),
        # ("src.api.controllers.mesas_controller", "Mesas"),
        # ("src.api.controllers.pedidos_controller", "Pedidos"),
        # ("src.api.controllers.pagos_controller", "Pagos"),
    ]

    # Prefijo API com√∫n para todas las rutas
    api_prefix = "/api/v1"

    for module_name, tag in controllers:
        try:
            # Importar din√°micamente el m√≥dulo del controlador
            module = importlib.import_module(module_name)
            router = getattr(module, "router", None)

            if router and isinstance(router, APIRouter):
                # Registrar el router con la aplicaci√≥n
                app.include_router(router, prefix=api_prefix, tags=[tag])
                logger.info(f"Router '{tag}' registrado correctamente")
            else:
                logger.warning(f"No se encontr√≥ un router v√°lido en {module_name}")
        except Exception as e:
            logger.error(f"Error al cargar el controlador {module_name}: {e}")


def create_app() -> FastAPI:
    """
    Crea y configura la aplicaci√≥n FastAPI.

    Configura todos los aspectos de la aplicaci√≥n FastAPI, incluyendo
    middlewares, gesti√≥n de excepciones y registro de rutas.

    Returns
    -------
    FastAPI
        Instancia configurada de la aplicaci√≥n FastAPI
    """
    settings = get_settings()

    # Crear la instancia de FastAPI
    app = FastAPI(
        title=settings.app_name,
        description=settings.app_description,
        version=settings.app_version,
        debug=settings.debug,
        lifespan=lifespan,
    )

    # Agregar middleware CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=settings.allowed_origins,
        allow_credentials=True,
        allow_methods=settings.allowed_methods,
        allow_headers=settings.allowed_headers,
    )

    # Agregar middleware para manejo de errores
    app.add_middleware(ErrorHandlerMiddleware)

    # Registrar todos los routers disponibles
    register_routers(app)

    # Registrar endpoints b√°sicos
    @app.get("/")
    async def root():
        """
        Endpoint ra√≠z de la API.

        Proporciona informaci√≥n b√°sica sobre la API y enlaces a la documentaci√≥n.

        Returns
        -------
        dict
            Informaci√≥n b√°sica sobre la API
        """
        return {
            "message": "Restaurant Backend API",
            "version": settings.app_version,
            "environment": settings.environment,
            "docs": "/docs",
            "redoc": "/redoc",
        }

    @app.get("/health")
    async def health_check():
        """
        Endpoint de verificaci√≥n de salud del sistema.

        Permite monitorizar el estado de la API para herramientas
        de supervisi√≥n y balanceadores de carga.

        Returns
        -------
        dict
            Estado actual del servicio
        """
        return {
            "status": "healthy",
            "service": "restaurant-backend",
            "version": settings.app_version,
            "environment": settings.environment,
        }

    return app


# Crear la instancia de la aplicaci√≥n
app = create_app()

# Punto de entrada para ejecuci√≥n directa del script
if __name__ == "__main__":
    import uvicorn

    # Obtener configuraci√≥n
    settings = get_settings()

    # Iniciar servidor uvicorn
    logger.info(f"Iniciando servidor en {settings.host}:{settings.port}")
    uvicorn.run(
        "src.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.debug,
        log_level=settings.log_level.lower(),
    )
