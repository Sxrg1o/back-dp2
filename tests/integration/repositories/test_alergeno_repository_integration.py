"""
Pruebas de integraci√≥n para el repositorio de al√©rgenos.
"""

import pytest
from uuid import uuid4

from src.models.menu.alergeno_model import AlergenoModel
from src.repositories.menu.alergeno_repository import AlergenoRepository
from src.core.enums.alergeno_enums import NivelRiesgo


@pytest.fixture(scope="function")
def alergeno_repository(db_session) -> AlergenoRepository:
    """
    Crea una instancia del repositorio de al√©rgenos con una sesi√≥n de base de datos.

    PRECONDICIONES:
        - La sesi√≥n de base de datos debe estar inicializada en conftest.py.

    PROCESO:
        - Crea y retorna una instancia del repositorio con la sesi√≥n proporcionada.

    POSTCONDICIONES:
        - El repositorio est√° listo para ser utilizado en las pruebas.
    """
    return AlergenoRepository(db_session)


@pytest.mark.asyncio
async def test_integration_create_alergeno(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la creaci√≥n de un al√©rgeno en la base de datos.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - La base de datos debe estar vac√≠a.

    PROCESO:
        - Crear un modelo de al√©rgeno con datos de prueba.
        - Persistir el modelo en la base de datos usando el repositorio.
        - Verificar que el al√©rgeno se ha creado correctamente con un ID v√°lido.

    POSTCONDICIONES:
        - El al√©rgeno debe existir en la base de datos con todos sus atributos correctos.
        - El m√©todo create debe retornar el modelo con su ID asignado.
    """
    # Arrange
    alergeno = AlergenoModel(
        nombre="alergeno_test", 
        descripcion="Al√©rgeno de prueba para integraci√≥n",
        icono="üß™",
        nivel_riesgo=NivelRiesgo.MEDIO
    )

    # Act
    resultado = await alergeno_repository.create(alergeno)

    # Assert
    assert resultado is not None
    assert resultado.id is not None
    assert resultado.nombre == "alergeno_test"
    assert resultado.descripcion == "Al√©rgeno de prueba para integraci√≥n"
    assert resultado.icono == "üß™"
    assert resultado.nivel_riesgo == NivelRiesgo.MEDIO
    assert resultado.activo is True  # Debe tener el valor por defecto


@pytest.mark.asyncio
async def test_integration_get_alergeno_by_id(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la recuperaci√≥n de un al√©rgeno por su ID.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - Debe existir un al√©rgeno en la base de datos.

    PROCESO:
        - Crear un al√©rgeno en la base de datos.
        - Recuperar el al√©rgeno usando get_by_id con su ID.
        - Verificar que el al√©rgeno recuperado coincide con el creado.
        - Intentar recuperar un al√©rgeno con un ID inexistente.

    POSTCONDICIONES:
        - El m√©todo get_by_id debe retornar el al√©rgeno correcto cuando existe.
        - Debe retornar None cuando el ID no existe en la base de datos.
    """
    # Arrange - Crear un al√©rgeno para la prueba
    alergeno = AlergenoModel(
        nombre="alergeno_recuperable", 
        descripcion="Al√©rgeno para probar get_by_id",
        nivel_riesgo=NivelRiesgo.ALTO
    )
    alergeno_creado = await alergeno_repository.create(alergeno)
    alergeno_id = alergeno_creado.id

    # Act - Recuperar el al√©rgeno por su ID
    alergeno_recuperado = await alergeno_repository.get_by_id(alergeno_id)

    # Assert - Verificar que se recuper√≥ correctamente
    assert alergeno_recuperado is not None
    assert alergeno_recuperado.id == alergeno_id
    assert alergeno_recuperado.nombre == "alergeno_recuperable"
    assert alergeno_recuperado.descripcion == "Al√©rgeno para probar get_by_id"
    assert alergeno_recuperado.nivel_riesgo == NivelRiesgo.ALTO

    # Probar con ID inexistente
    alergeno_inexistente = await alergeno_repository.get_by_id(uuid4())
    assert alergeno_inexistente is None


@pytest.mark.asyncio
async def test_integration_delete_alergeno(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la eliminaci√≥n de un al√©rgeno.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - Debe existir un al√©rgeno en la base de datos para ser eliminado.

    PROCESO:
        - Crear un al√©rgeno en la base de datos.
        - Eliminar el al√©rgeno usando su ID.
        - Verificar que el al√©rgeno ya no existe en la base de datos.
        - Intentar eliminar un al√©rgeno con un ID inexistente.

    POSTCONDICIONES:
        - El m√©todo delete debe retornar True cuando el al√©rgeno se elimina correctamente.
        - Debe retornar False cuando el ID no existe en la base de datos.
        - El al√©rgeno eliminado no debe ser recuperable despu√©s de la eliminaci√≥n.
    """
    # Arrange - Crear un al√©rgeno para eliminarlo
    alergeno = AlergenoModel(
        nombre="alergeno_eliminar", 
        descripcion="Al√©rgeno para probar delete",
        nivel_riesgo=NivelRiesgo.BAJO
    )
    alergeno_creado = await alergeno_repository.create(alergeno)
    alergeno_id = alergeno_creado.id

    # Act - Eliminar el al√©rgeno
    resultado_eliminacion = await alergeno_repository.delete(alergeno_id)

    # Assert - Verificar que se elimin√≥ correctamente
    assert resultado_eliminacion is True

    # Verificar que el al√©rgeno ya no existe
    alergeno_eliminado = await alergeno_repository.get_by_id(alergeno_id)
    assert alergeno_eliminado is None

    # Probar eliminar un al√©rgeno inexistente
    resultado_no_existe = await alergeno_repository.delete(uuid4())
    assert resultado_no_existe is False


@pytest.mark.asyncio
async def test_integration_get_by_nombre(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la recuperaci√≥n de un al√©rgeno por su nombre.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - Debe existir un al√©rgeno en la base de datos.

    PROCESO:
        - Crear un al√©rgeno en la base de datos.
        - Recuperar el al√©rgeno usando get_by_nombre con su nombre.
        - Verificar que el al√©rgeno recuperado coincide con el creado.
        - Intentar recuperar un al√©rgeno con un nombre inexistente.

    POSTCONDICIONES:
        - El m√©todo get_by_nombre debe retornar el al√©rgeno correcto cuando existe.
        - Debe retornar None cuando el nombre no existe en la base de datos.
    """
    # Arrange - Crear un al√©rgeno para la prueba
    alergeno = AlergenoModel(
        nombre="alergeno_por_nombre", 
        descripcion="Al√©rgeno para probar get_by_nombre",
        icono="üîç",
        nivel_riesgo=NivelRiesgo.CRITICO
    )
    await alergeno_repository.create(alergeno)

    # Act - Recuperar el al√©rgeno por su nombre
    alergeno_recuperado = await alergeno_repository.get_by_nombre("alergeno_por_nombre")

    # Assert - Verificar que se recuper√≥ correctamente
    assert alergeno_recuperado is not None
    assert alergeno_recuperado.nombre == "alergeno_por_nombre"
    assert alergeno_recuperado.descripcion == "Al√©rgeno para probar get_by_nombre"
    assert alergeno_recuperado.icono == "üîç"
    assert alergeno_recuperado.nivel_riesgo == NivelRiesgo.CRITICO

    # Probar con nombre inexistente
    alergeno_inexistente = await alergeno_repository.get_by_nombre("nombre_inexistente")
    assert alergeno_inexistente is None


@pytest.mark.asyncio
async def test_integration_get_activos(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la recuperaci√≥n de al√©rgenos activos.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - Deben existir al√©rgenos activos e inactivos en la base de datos.

    PROCESO:
        - Crear al√©rgenos activos e inactivos en la base de datos.
        - Recuperar solo los al√©rgenos activos usando get_activos.
        - Verificar que solo se retornan los al√©rgenos activos.

    POSTCONDICIONES:
        - El m√©todo get_activos debe retornar solo los al√©rgenos con activo=True.
        - No debe retornar al√©rgenos con activo=False.
    """
    # Arrange - Crear al√©rgenos activos e inactivos
    alergeno_activo1 = AlergenoModel(
        nombre="alergeno_activo_1", 
        descripcion="Al√©rgeno activo 1",
        activo=True
    )
    alergeno_activo2 = AlergenoModel(
        nombre="alergeno_activo_2", 
        descripcion="Al√©rgeno activo 2",
        activo=True
    )
    alergeno_inactivo = AlergenoModel(
        nombre="alergeno_inactivo", 
        descripcion="Al√©rgeno inactivo",
        activo=False
    )

    await alergeno_repository.create(alergeno_activo1)
    await alergeno_repository.create(alergeno_activo2)
    await alergeno_repository.create(alergeno_inactivo)

    # Act - Recuperar solo los al√©rgenos activos
    alergenos_activos = await alergeno_repository.get_activos()

    # Assert - Verificar que solo se retornan los activos
    assert alergenos_activos is not None
    assert isinstance(alergenos_activos, list)
    assert len(alergenos_activos) == 2
    
    nombres_activos = [alergeno.nombre for alergeno in alergenos_activos]
    assert "alergeno_activo_1" in nombres_activos
    assert "alergeno_activo_2" in nombres_activos
    assert "alergeno_inactivo" not in nombres_activos
    
    # Verificar que todos los al√©rgenos retornados est√°n activos
    assert all(alergeno.activo is True for alergeno in alergenos_activos)


@pytest.mark.asyncio
async def test_integration_get_all(alergeno_repository: AlergenoRepository):
    """
    Prueba de integraci√≥n para verificar la recuperaci√≥n paginada de al√©rgenos.

    PRECONDICIONES:
        - El repositorio debe estar correctamente inicializado.
        - Deben existir m√∫ltiples al√©rgenos en la base de datos.

    PROCESO:
        - Crear m√∫ltiples al√©rgenos en la base de datos.
        - Recuperar los al√©rgenos usando get_all con paginaci√≥n.
        - Verificar que se retorna la lista correcta y el total de registros.

    POSTCONDICIONES:
        - El m√©todo get_all debe retornar una tupla con lista de al√©rgenos y total.
        - La paginaci√≥n debe funcionar correctamente.
    """
    # Arrange - Crear m√∫ltiples al√©rgenos
    alergenos_creados = []
    for i in range(5):
        alergeno = AlergenoModel(
            nombre=f"alergeno_paginacion_{i}", 
            descripcion=f"Al√©rgeno para probar paginaci√≥n {i}",
            nivel_riesgo=NivelRiesgo.MEDIO
        )
        alergeno_creado = await alergeno_repository.create(alergeno)
        alergenos_creados.append(alergeno_creado)

    # Act - Recuperar con paginaci√≥n
    alergenos, total = await alergeno_repository.get_all(skip=0, limit=3)

    # Assert - Verificar la paginaci√≥n
    assert alergenos is not None
    assert isinstance(alergenos, list)
    assert len(alergenos) == 3  # Limitamos a 3
    assert total == 5  # Total de al√©rgenos creados
    
    # Verificar que todos son instancias de AlergenoModel
    assert all(isinstance(alergeno, AlergenoModel) for alergeno in alergenos)

    # Probar con offset
    alergenos_offset, total_offset = await alergeno_repository.get_all(skip=2, limit=2)
    assert len(alergenos_offset) == 2
    assert total_offset == 5
