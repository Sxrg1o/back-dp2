"""
Pruebas unitarias para el modelo AlergenoModel.

Verifica el comportamiento del modelo de alÃ©rgenos incluyendo creaciÃ³n,
validaciones, mÃ©todos de conversiÃ³n y representaciÃ³n.
"""

import pytest
from src.models.menu.alergeno_model import AlergenoModel
from src.core.enums.alergeno_enums import NivelRiesgo


class TestAlergenoModel:
    """Clase de pruebas para AlergenoModel."""

    def test_alergeno_model_creation_with_minimal_data(self):
        """
        Verifica que un objeto AlergenoModel se crea correctamente con datos mÃ­nimos.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con solo el nombre requerido.

        POSTCONDICIONES:
            - Los atributos deben tener los valores correctos.
            - Los valores por defecto deben aplicarse correctamente.
        """
        alergeno = AlergenoModel(nombre="Gluten")

        assert alergeno.nombre == "Gluten"
        assert alergeno.descripcion is None
        assert alergeno.icono is None
        # Los valores por defecto se aplicarÃ¡n cuando se persista en la base de datos
        # En las pruebas unitarias, verificamos que los atributos existen
        assert hasattr(alergeno, 'nivel_riesgo')
        assert hasattr(alergeno, 'activo')

    def test_alergeno_model_creation_with_all_data(self):
        """
        Verifica que un objeto AlergenoModel se crea correctamente con todos los datos.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con todos los atributos especificados.

        POSTCONDICIONES:
            - Todos los atributos deben tener los valores correctos.
        """
        alergeno = AlergenoModel(
            nombre="Lactosa",
            descripcion="AzÃºcar natural presente en la leche y productos lÃ¡cteos",
            icono="ðŸ¥›",
            nivel_riesgo=NivelRiesgo.ALTO,
            activo=True
        )

        assert alergeno.nombre == "Lactosa"
        assert alergeno.descripcion == "AzÃºcar natural presente en la leche y productos lÃ¡cteos"
        assert alergeno.icono == "ðŸ¥›"
        assert alergeno.nivel_riesgo == NivelRiesgo.ALTO
        assert alergeno.activo is True

    def test_alergeno_model_default_values(self):
        """
        Verifica que los valores por defecto se aplican correctamente.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia sin especificar valores opcionales.

        POSTCONDICIONES:
            - Los valores por defecto deben aplicarse segÃºn la definiciÃ³n del modelo.
        """
        alergeno = AlergenoModel(nombre="Mariscos")

        # Los valores por defecto se aplicarÃ¡n cuando se persista en la base de datos
        # En las pruebas unitarias, verificamos que los atributos existen
        assert hasattr(alergeno, 'nivel_riesgo')
        assert hasattr(alergeno, 'activo')
        assert alergeno.descripcion is None
        assert alergeno.icono is None

    def test_alergeno_model_different_risk_levels(self):
        """
        Verifica que se pueden crear alÃ©rgenos con diferentes niveles de riesgo.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancias con cada nivel de riesgo disponible.

        POSTCONDICIONES:
            - Cada instancia debe tener el nivel de riesgo correcto.
        """
        alergenos = [
            AlergenoModel(nombre="Bajo Riesgo", nivel_riesgo=NivelRiesgo.BAJO),
            AlergenoModel(nombre="Medio Riesgo", nivel_riesgo=NivelRiesgo.MEDIO),
            AlergenoModel(nombre="Alto Riesgo", nivel_riesgo=NivelRiesgo.ALTO),
            AlergenoModel(nombre="CrÃ­tico Riesgo", nivel_riesgo=NivelRiesgo.CRITICO),
        ]

        for alergeno in alergenos:
            assert alergeno.nivel_riesgo in NivelRiesgo
            assert alergeno.nombre in ["Bajo Riesgo", "Medio Riesgo", "Alto Riesgo", "CrÃ­tico Riesgo"]

    def test_alergeno_model_to_dict(self):
        """
        Verifica que el mÃ©todo to_dict convierte correctamente el modelo a diccionario.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con datos especÃ­ficos.
            - Llamar al mÃ©todo to_dict.

        POSTCONDICIONES:
            - El diccionario debe contener todos los atributos del modelo.
            - Los valores deben coincidir con los de la instancia.
        """
        alergeno = AlergenoModel(
            nombre="Nueces",
            descripcion="Frutos secos que pueden causar reacciones alÃ©rgicas",
            icono="ðŸ¥œ",
            nivel_riesgo=NivelRiesgo.ALTO,
            activo=False
        )

        result_dict = alergeno.to_dict()

        assert isinstance(result_dict, dict)
        assert result_dict["nombre"] == "Nueces"
        assert result_dict["descripcion"] == "Frutos secos que pueden causar reacciones alÃ©rgicas"
        assert result_dict["icono"] == "ðŸ¥œ"
        assert result_dict["nivel_riesgo"] == NivelRiesgo.ALTO
        assert result_dict["activo"] is False

    def test_alergeno_model_from_dict(self):
        """
        Verifica que el mÃ©todo from_dict crea correctamente una instancia desde un diccionario.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear diccionario con datos de alÃ©rgeno.
            - Llamar al mÃ©todo from_dict.

        POSTCONDICIONES:
            - La instancia creada debe tener los valores correctos.
        """
        data = {
            "nombre": "SÃ©samo",
            "descripcion": "Semillas de sÃ©samo",
            "icono": "ðŸŒ°",
            "nivel_riesgo": NivelRiesgo.MEDIO,
            "activo": True
        }

        alergeno = AlergenoModel.from_dict(data)

        assert alergeno.nombre == "SÃ©samo"
        assert alergeno.descripcion == "Semillas de sÃ©samo"
        assert alergeno.icono == "ðŸŒ°"
        assert alergeno.nivel_riesgo == NivelRiesgo.MEDIO
        assert alergeno.activo is True

    def test_alergeno_model_update_from_dict(self):
        """
        Verifica que el mÃ©todo update_from_dict actualiza correctamente los atributos.

        PRECONDICIONES:
            - Tener una instancia de AlergenoModel existente.

        PROCESO:
            - Crear instancia inicial.
            - Llamar a update_from_dict con nuevos datos.

        POSTCONDICIONES:
            - Los atributos deben actualizarse con los nuevos valores.
        """
        alergeno = AlergenoModel(
            nombre="Original",
            descripcion="DescripciÃ³n original",
            nivel_riesgo=NivelRiesgo.BAJO
        )

        update_data = {
            "descripcion": "DescripciÃ³n actualizada",
            "nivel_riesgo": NivelRiesgo.ALTO,
            "activo": False
        }

        alergeno.update_from_dict(update_data)

        assert alergeno.nombre == "Original"  # No se actualiza porque no estÃ¡ en update_data
        assert alergeno.descripcion == "DescripciÃ³n actualizada"
        assert alergeno.nivel_riesgo == NivelRiesgo.ALTO
        assert alergeno.activo is False

    def test_alergeno_model_repr(self):
        """
        Verifica que el mÃ©todo __repr__ devuelve una representaciÃ³n string correcta.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con datos especÃ­ficos.
            - Llamar a repr() o str().

        POSTCONDICIONES:
            - La representaciÃ³n string debe contener informaciÃ³n relevante del modelo.
        """
        alergeno = AlergenoModel(
            nombre="Huevos",
            nivel_riesgo=NivelRiesgo.CRITICO,
            activo=True
        )

        repr_string = repr(alergeno)

        assert "AlergenoModel" in repr_string
        assert "Huevos" in repr_string
        assert "critico" in repr_string
        assert "True" in repr_string

    def test_alergeno_model_inactive_state(self):
        """
        Verifica que se puede crear un alÃ©rgeno en estado inactivo.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con activo=False.

        POSTCONDICIONES:
            - El atributo activo debe ser False.
        """
        alergeno = AlergenoModel(
            nombre="AlÃ©rgeno Inactivo",
            activo=False
        )

        assert alergeno.activo is False
        assert alergeno.nombre == "AlÃ©rgeno Inactivo"

    def test_alergeno_model_with_long_description(self):
        """
        Verifica que se puede crear un alÃ©rgeno con descripciÃ³n larga.

        PRECONDICIONES:
            - Ninguna especial.

        PROCESO:
            - Crear instancia con descripciÃ³n extensa.

        POSTCONDICIONES:
            - La descripciÃ³n debe almacenarse correctamente.
        """
        long_description = (
            "Este alÃ©rgeno puede estar presente en mÃºltiples productos y "
            "causar reacciones alÃ©rgicas severas en personas sensibles. "
            "Es importante verificar siempre los ingredientes antes de consumir."
        )

        alergeno = AlergenoModel(
            nombre="AlÃ©rgeno Complejo",
            descripcion=long_description
        )

        assert alergeno.descripcion == long_description
        assert len(alergeno.descripcion) > 100
